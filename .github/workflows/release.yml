name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0, 1.0.0-beta.1)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - beta
          - alpha
          - rc
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix (e.g., 1.0.0, 1.0.0-beta.1)"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"
    
    - name: Check if tag exists
      run: |
        if git tag -l | grep -q "^v${{ github.event.inputs.version }}$"; then
          echo "❌ Tag v${{ github.event.inputs.version }} already exists"
          exit 1
        fi
        echo "✅ Tag v${{ github.event.inputs.version }} is available"
    
    - name: Update version in files
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Update pyproject.toml
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        
        # Update __init__.py
        sed -i "s/__version__ = .*/__version__ = \"$VERSION\"/" src/easecloud_errica/__init__.py
        
        echo "📝 Updated version to: $VERSION"
        
        # Verify changes
        echo "📋 pyproject.toml:"
        grep "^version = " pyproject.toml
        echo "📋 __init__.py:"
        grep "__version__ = " src/easecloud_errica/__init__.py
    
    - name: Test package with new version
      run: |
        python -m pip install --upgrade pip
        pip install build
        python -m build
        pip install dist/*.whl
        python -c "import easecloud_errica; print(f'✅ Package test successful - v{easecloud_errica.__version__}')"
    
    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml src/easecloud_errica/__init__.py
        git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
        git push
    
    - name: Create and push tag
      run: |
        git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"
        echo "🏷️ Created and pushed tag: v${{ github.event.inputs.version }}"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "📋 Changes since $LAST_TAG:"
          CHANGES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          echo "📋 Initial release changes:"
          CHANGES=$(git log --pretty=format:"- %s")
        fi
        
        # Save changelog to file for the release
        cat > RELEASE_CHANGELOG.md << EOF
        ## 🎉 Errica v${{ github.event.inputs.version }}
        
        **Installation:**
        \`\`\`bash
        pip install easecloud-errica==${{ github.event.inputs.version }}
        \`\`\`
        
        **Changes:**
        $CHANGES
        
        **Full Changelog:** https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ github.event.inputs.version }}
        EOF
        
        echo "changelog-file=RELEASE_CHANGELOG.md" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Errica v${{ github.event.inputs.version }}
        body_path: ${{ steps.changelog.outputs.changelog-file }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
    
    - name: Trigger publish workflow
      run: |
        echo "🚀 Release created! This will trigger the publish workflow."
        echo "📦 Package will be published to PyPI automatically."
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version }}"